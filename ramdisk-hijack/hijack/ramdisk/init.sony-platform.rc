# This is platform rc
import init.sony-device.rc

on init
    # See storage config details at http://source.android.com/tech/storage/
    # Internal SDCard legacy
    mkdir /mnt/shell/emulated 0700 shell shell
    mkdir /storage 0550 system sdcard_r
    mkdir /storage/emulated 0555 root root
    mkdir /storage/emulated/legacy 0555 root root

    export EXTERNAL_STORAGE /storage/emulated/legacy
    export EMULATED_STORAGE_SOURCE /mnt/shell/emulated
    export EMULATED_STORAGE_TARGET /storage/emulated

    # Support legacy paths
    symlink /storage/emulated/legacy /sdcard
    symlink /storage/emulated/legacy /mnt/sdcard
    symlink /storage/emulated/legacy /storage/sdcard0

    # removable storages
    mkdir /storage/removable 0050 system removable_rw

    # External SDcard mountpoint
    export SECONDARY_STORAGE /storage/removable/sdcard1
    mkdir /storage/removable/sdcard1 0000 system system
    symlink /storage/removable/sdcard1 /sdcard1
    symlink /storage/removable/sdcard1 /ext_card
    symlink /storage/removable/sdcard1 /storage/sdcard1

    # External USB mass storage support
    export EXTERNAL_STORAGE_USB /storage/removable/usbdisk
    mkdir /storage/removable/usbdisk 0000 system system
    symlink /storage/removable/usbdisk /mnt/usbdisk
    symlink /storage/removable/usbdisk /usbdisk
    symlink /storage/removable/usbdisk /storage/usbdisk

    # USB related initialization
    write /sys/class/android_usb/android0/iSerial ${ro.serialno}
    write /sys/class/android_usb/android0/f_rndis/vendorID 0fce
    write /sys/class/android_usb/android0/f_rndis/wceis 1


    # create USB host bus directory here so that libusbhost
    # can start monitoring.
    mkdir /dev/bus 0755 root root
    mkdir /dev/bus/usb 0755 root root

on fs
    mkdir /lta-label 0555 system system
    wait /dev/block/platform/msm_sdcc.1/by-name/LTALabel
    mount ext4 /dev/block/platform/msm_sdcc.1/by-name/LTALabel /lta-label nosuid nodev noatime noexec ro barrier=0
    chown system system /lta-label
    chmod 0555 /lta-label

on boot
    # USB gadget initial setup
    write /sys/class/android_usb/android0/iManufacturer ${ro.product.manufacturer}
    write /sys/class/android_usb/android0/f_rndis/manufacturer ${ro.product.manufacturer}
    write /sys/class/android_usb/android0/iProduct ${ro.product.model}

    

    
    

    # Enable Wi-Fi EAP SIM
    setprop ro.wifi.eap_sim_enabled true

    # Do not power down SIM in flight mode (required for Wi-Fi EAP-SIM)
    setprop persist.radio.apm_sim_not_pwdn 1

on early-boot
    # Start secchan daemon service before entering charge only mode.
    start secchan
    # Start the offline charging (This blocks booting further in some cases)
    exec /system/bin/charger
    write /sys/module/pm8921_charger/parameters/enable_lowbatt_detect 1

on post-fs
   start ric

on property:sys.usb.config=mass_storage
    exec /init.usbmode.sh
    stop adbd
    setprop sys.usb.state ${sys.usb.config}

on property:sys.usb.config=mass_storage,adb
    exec /init.usbmode.sh
    start adbd
    setprop sys.usb.state ${sys.usb.config}

on property:sys.usb.config=mtp
    exec /init.usbmode.sh
    stop adbd
    setprop sys.usb.state ${sys.usb.config}

on property:sys.usb.config=mtp,adb
    exec /init.usbmode.sh
    start adbd
    setprop sys.usb.state ${sys.usb.config}

on property:sys.usb.config=mtp,cdrom
    exec /init.usbmode.sh
    stop adbd
    setprop sys.usb.state ${sys.usb.config}

on property:sys.usb.config=mtp,cdrom,adb
    exec /init.usbmode.sh
    stop adbd
    setprop sys.usb.state ${sys.usb.config}

on property:sys.usb.config=rndis
    exec /init.usbmode.sh
    stop adbd
    setprop sys.usb.state ${sys.usb.config}

on property:sys.usb.config=rndis,adb
    exec /init.usbmode.sh
    start adbd
    setprop sys.usb.state ${sys.usb.config}


#Sony: TrimArea Daemon
# last 2 args: start block(blk size 128k), number of blocks(partitionsize(kb) /128(kb))
service tad_static /sbin/tad_static /dev/block/mmcblk0 1,16
    user root
    group root
    socket tad stream 0660 system system
    class trimarea

# Trim Area QMI service
service ta_qmi_service /system/bin/ta_qmi_service
    user root
    disabled

service hw_config /system/bin/sh /system/etc/hw_config.sh
    class main
    user root
    oneshot

on post-fs
    # Owner for the proximity sensor
    chown system system /sys/devices/i2c-12/12-0054/threshold
    chown system system /sys/devices/i2c-12/12-0054/nburst

service illumination /system/bin/illumination_service
    socket illumination stream 0666 root system
    class main
    user root

service updatemiscta /system/bin/updatemiscta
    class main
    user root
    oneshot







service ssr_dump /system/bin/subsystem_ramdump
    class core
    user root

# use system_monitor
service system_monitor /system/bin/system_monitor
    socket sysmon stream 0660 root system
    class core
    user root

# DxHDCP key provisioning
on property:dev.bootcomplete=1
   start dxhdcpd
service dxhdcpd /system/bin/dxhdcpd
   user system
   group system
   oneshot
   disabled

service sdcard /system/bin/sdcard /data/media /mnt/shell/emulated 1023 1023
    class late_start
    disabled

# Regulatory domain handling
service iw_command /system/bin/iw
    disabled
    oneshot

on property:ro.fuse_sdcard=true
    start sdcard

# Binding fuse mount point to /storage/emulated/legacy
on property:init.svc.sdcard=running
    wait /mnt/shell/emulated/0
    mount none /mnt/shell/emulated/0 /storage/emulated/legacy bind

# This will make sure that sdcard service starts as late_start.
on nonencrypted
    setprop ro.fuse_sdcard ${persist.fuse_sdcard}

on property:vold.decrypt=trigger_restart_framework
    setprop ro.fuse_sdcard ${persist.fuse_sdcard}
